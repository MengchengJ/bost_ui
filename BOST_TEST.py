# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'BOST_TEST.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import gc
import os, time
import cv2
import numpy as np
from PyQt5 import QtCore, QtGui, QtWidgets
from matplotlib import pyplot as plt
import re
import common2 as com
import DDS2 as DDS

global C, cyc, tilenumber, move_localfolder

from matplotlib.pyplot import MultipleLocator


class Ui_BOST_TEST(object):
    global C ,Xoffset,Yoffset
    C = DDS.NSDS()
    dct_tm, dct_ij, dct_param = com.readTMdefine('save/TM570.txt')
    Xoffset = dct_param['XOffset']
    Yoffset = dct_param['YOffset']
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(689, 936)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.BOST_FOR_FCOUSE_Button = QtWidgets.QPushButton(self.centralwidget)
        self.BOST_FOR_FCOUSE_Button.setGeometry(QtCore.QRect(50, 60, 151, 51))
        self.BOST_FOR_FCOUSE_Button.setObjectName("BOST_FOR_FCOUSE_Button")
        self.analyze_WDI_focus_Button = QtWidgets.QPushButton(self.centralwidget)
        self.analyze_WDI_focus_Button.setGeometry(QtCore.QRect(50, 140, 171, 61))
        self.analyze_WDI_focus_Button.setObjectName("analyze_WDI_focus_Button")
        self.analyze_offset_Button = QtWidgets.QPushButton(self.centralwidget)
        self.analyze_offset_Button.setGeometry(QtCore.QRect(270, 140, 151, 51))
        self.analyze_offset_Button.setObjectName("analyze_offset_Button")
        self.cyc_value = QtWidgets.QLineEdit(self.centralwidget)
        self.cyc_value.setGeometry(QtCore.QRect(240, 70, 71, 31))
        self.cyc_value.setObjectName("cyc_value")
        self.cyc_value.setText(str(1))
        self.cyc_label = QtWidgets.QLabel(self.centralwidget)
        self.cyc_label.setGeometry(QtCore.QRect(230, 40, 91, 16))
        self.cyc_label.setObjectName("cyc_label")
        self.FM_label = QtWidgets.QLabel(self.centralwidget)
        self.FM_label.setGeometry(QtCore.QRect(360, 40, 72, 15))
        self.FM_label.setObjectName("FM_label")
        self.FMfile_text = QtWidgets.QLineEdit(self.centralwidget)
        self.FMfile_text.setGeometry(QtCore.QRect(350, 70, 81, 31))
        self.FMfile_text.setObjectName("FMfile_text")
        self.FMfile_text.setText(str('FM4x9'))
        self.static_fcouse_Button = QtWidgets.QPushButton(self.centralwidget)
        self.static_fcouse_Button.setGeometry(QtCore.QRect(50, 240, 151, 51))
        self.static_fcouse_Button.setObjectName("static_fcouse_Button")
        self.static_fcouse_cyc_value = QtWidgets.QLineEdit(self.centralwidget)
        self.static_fcouse_cyc_value.setGeometry(QtCore.QRect(240, 250, 71, 31))
        self.static_fcouse_cyc_value.setObjectName("static_fcouse_cyc_value")
        self.static_fcouse_cyc_label = QtWidgets.QLabel(self.centralwidget)
        self.static_fcouse_cyc_label.setGeometry(QtCore.QRect(230, 220, 91, 16))
        self.static_fcouse_cyc_label.setObjectName("static_fcouse_cyc_label")
        self.static_fcouse_cyc_value.setText(str(10))
        self.analyze_static_fcouse_Button = QtWidgets.QPushButton(self.centralwidget)
        self.analyze_static_fcouse_Button.setGeometry(QtCore.QRect(350, 240, 191, 51))
        self.analyze_static_fcouse_Button.setObjectName("analyze_static_fcouse_Button")
        self.Region_Vibration_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Region_Vibration_Button.setGeometry(QtCore.QRect(50, 330, 181, 61))
        self.Region_Vibration_Button.setObjectName("Region_Vibration_Button")
        self.FMfile_Vibration_text = QtWidgets.QLineEdit(self.centralwidget)
        self.FMfile_Vibration_text.setGeometry(QtCore.QRect(390, 350, 81, 31))
        self.FMfile_Vibration_text.setObjectName("FMfile_Vibration_text")
        self.FMfile_Vibration_text.setText(str('FM4x9'))
        self.cyc_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.cyc_label_2.setGeometry(QtCore.QRect(270, 320, 91, 16))
        self.cyc_label_2.setObjectName("cyc_label_2")
        self.FM_label_2 = QtWidgets.QLabel(self.centralwidget)
        self.FM_label_2.setGeometry(QtCore.QRect(400, 320, 72, 15))
        self.FM_label_2.setObjectName("FM_label_2")
        self.Vibration_scan_rep_value = QtWidgets.QLineEdit(self.centralwidget)
        self.Vibration_scan_rep_value.setGeometry(QtCore.QRect(280, 350, 71, 31))
        self.Vibration_scan_rep_value.setObjectName("Vibration_scan_rep_value")
        self.Vibration_scan_rep_value.setText(str(1))
        self.Global_Scan_Button = QtWidgets.QPushButton(self.centralwidget)
        self.Global_Scan_Button.setGeometry(QtCore.QRect(50, 420, 131, 51))
        self.Global_Scan_Button.setObjectName("Global_Scan_Button")
        self.global_scan_rep_value = QtWidgets.QLineEdit(self.centralwidget)
        self.global_scan_rep_value.setGeometry(QtCore.QRect(280, 430, 71, 31))
        self.global_scan_rep_value.setObjectName("global_scan_rep_value")
        self.global_scan_rep_value.setText(str(1))
        self.cyc_label_3 = QtWidgets.QLabel(self.centralwidget)
        self.cyc_label_3.setGeometry(QtCore.QRect(270, 400, 91, 16))
        self.cyc_label_3.setObjectName("cyc_label_3")
        self.wait_time_for_fcouse_text = QtWidgets.QLineEdit(self.centralwidget)
        self.wait_time_for_fcouse_text.setGeometry(QtCore.QRect(460, 70, 81, 31))
        self.wait_time_for_fcouse_text.setObjectName("wait_time_for_fcouse_text")
        self.wait_time_for_fcouse_text.setText(str(0.1))
        self.wait_time_for_fcouse_text_label = QtWidgets.QLabel(self.centralwidget)
        self.wait_time_for_fcouse_text_label.setGeometry(QtCore.QRect(470, 40, 72, 15))
        self.wait_time_for_fcouse_text_label.setObjectName("wait_time_for_fcouse_text_label")
        self.wait_time_for_vibration_label = QtWidgets.QLabel(self.centralwidget)
        self.wait_time_for_vibration_label.setGeometry(QtCore.QRect(520, 320, 72, 15))
        self.wait_time_for_vibration_label.setObjectName("wait_time_for_vibration_label")
        self.wait_time_for_vibration_text = QtWidgets.QLineEdit(self.centralwidget)
        self.wait_time_for_vibration_text.setGeometry(QtCore.QRect(510, 350, 81, 31))
        self.wait_time_for_vibration_text.setObjectName("wait_time_for_vibration_text")
        self.wait_time_for_vibration_text.setText(str(0.03))
        self.camer_Button = QtWidgets.QPushButton(self.centralwidget)
        self.camer_Button.setGeometry(QtCore.QRect(50, 510, 131, 51))
        self.camer_Button.setObjectName("camer_Button")
        self.led_test_Button = QtWidgets.QPushButton(self.centralwidget)
        self.led_test_Button.setGeometry(QtCore.QRect(220, 510, 131, 51))
        self.led_test_Button.setObjectName("led_test_Button")
        self.BOST21_Button = QtWidgets.QPushButton(self.centralwidget)
        self.BOST21_Button.setGeometry(QtCore.QRect(50, 590, 131, 51))
        self.BOST21_Button.setObjectName("BOST21_Button")
        self.intensity_stability_Button = QtWidgets.QPushButton(self.centralwidget)
        self.intensity_stability_Button.setGeometry(QtCore.QRect(220, 590, 131, 51))
        self.intensity_stability_Button.setObjectName("intensity_stability_Button")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 689, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.retranslateUi(MainWindow)

        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.BOST_FOR_FCOUSE_Button.clicked.connect(self.move_for_focus)

        self.analyze_WDI_focus_Button.clicked.connect(self.analyze_WDI_focus)
        self.static_fcouse_Button.clicked.connect(self.static_focus)
        # self.analyze_offset_Button.clicked.connect(self.BOST_FOR_FCOUSE)
        self.Region_Vibration_Button.clicked.connect(self.region_vibration_test)

        self.Global_Scan_Button.clicked.connect(self.Global_Scan)

        self.led_test_Button.clicked.connect(self.LED_test)

        self.BOST21_Button.clicked.connect(self.BOST21)

        self.camer_Button.clicked.connect(self.camer_test)

        self.intensity_stability_Button.clicked.connect(self.intensity_stability)

    def analyze_WDI_focus(self):

        Search_Folder = com.setOutputFolder('output/BOST_FOR_FCOUSE/move_focus/')
        # for root, dirs, files in os.walk(Search_Folder):
        #   print(root)
        lists = os.listdir(Search_Folder)  # 列出目录的下所有文件和文件夹保存到lists
        print(list)
        lists.sort(key=lambda fn: os.path.getmtime(Search_Folder + "\\" + fn))  # 按时间排序
        file_new = os.path.join(Search_Folder, lists[-1])  # 获取最新的文件保存到file_new

        try:
            file_folder = os.path.join(file_new + '/focus_accuracy.txt')
            file = open(file_folder, 'r')

            focus_result = []

            i = 0
            j = 0
            for line in file:
                line_data = line.split()
                focus_result.append([])
                for split_data in line_data:
                    m = re.findall(r"[+-]?\d+(?:\.\d+)?", split_data)

                    focus_result[j].append(m)
                    i = i + 1
                j = j + 1

            cyc = int(self.cyc_value.text())
            tilenumber = int(j / cyc)
            focus_result = np.array(focus_result)
            fig = plt.figure(figsize=(20, 10))
            ax = fig.add_subplot(1, 1, 1)
            for i in range(1, cyc + 1):
                tile = (np.array((focus_result[tilenumber * (i - 1):tilenumber * (i), 1]), dtype=np.int16))
                fv_value = np.array((focus_result[tilenumber * (i - 1):tilenumber * (i), 4]), dtype=np.float32)
                fv_value2= np.array((focus_result[tilenumber * (i - 1):tilenumber * (i), 7]), dtype=np.float32)
                ax.plot(tile, fv_value[:, 0]-fv_value2[:, 0], '.')
                ax.plot(tile, fv_value[:, 0], '.', color='r')
                ax.plot(tile, fv_value2[:, 0], '.', color='g')

            x_major_locator = MultipleLocator(100)
            ax.xaxis.set_major_locator(x_major_locator)
            # y_major_locator = MultipleLocator(1)
            # ax.yaxis.set_major_locator(y_major_locator)
            plt.ylim(min(fv_value[:, 0]-fv_value2[:, 0] - 0.05), max(fv_value[:, 0] + 0.05))
            plt.xlim(-1, 2200)
            plt.xlabel('tile_num')
            plt.ylabel('fv_value')
            fv_value_all = np.array((focus_result[:, 4]), dtype=np.float32)
            min_fv = np.min(fv_value_all)
            x, y = np.where(fv_value_all == np.min(fv_value_all))
            cyc_min = focus_result[x, 0]
            tile_min = focus_result[x, 1]
            print('min fv:%4f cyc:%d tile:%d' % (min_fv, cyc_min, tile_min))
            max_fv = np.max(fv_value_all)
            x, y = np.where(fv_value_all == np.max(fv_value_all))
            cyc_max = focus_result[x, 0]
            tile_max = focus_result[x, 1]
            ax.set_title('fcouse test min fv:%4f cyc:%d tile:%d \n  max fv:%4f cyc:%d tile:%d' % (
            min_fv, cyc_min, tile_min, max_fv, cyc_max, tile_max))
            plt.plot([0, max(tile)], [0.1, 0.1], 'r:')
            plt.savefig(os.path.join(file_new, 'focusc-value.png'))
            plt.show()
            fig2 = plt.figure(figsize=(20, 10))
            ax = fig2.add_subplot(1, 1, 1)

            for i in range(1, cyc + 1):
                tile = (np.array((focus_result[tilenumber * (i - 1):tilenumber * (i), 1]), dtype=np.int16))
                z_value = np.array((focus_result[tilenumber * (i - 1):tilenumber * (i), 2]), dtype=np.float32)
                z_value_sacn = np.array((focus_result[tilenumber * (i - 1):tilenumber * (i), 6]), dtype=np.float32)
                #ax.plot(tile, z_value[:, 0], '.',color='g')
                ax.plot(tile, z_value_sacn[:, 0]-z_value[:, 0], '.',color='r')



            x_major_locator = MultipleLocator(100)
            ax.xaxis.set_major_locator(x_major_locator)
            plt.ylim(min(z_value_sacn[:, 0]-z_value[:, 0]-0.1), max(z_value_sacn[:, 0]-z_value[:, 0] + 0.1))
            plt.xlim(-1, 2200)
            plt.xlabel('tile_num')
            plt.ylabel('z_value')
            plt.plot([0, max(tile)])
            plt.savefig(os.path.join(file_new, 'z-value.png'))
            plt.show()

        except IOError as e:
            print('could not open file:', e)

    def static_focus(self):
        move_z = 10
        C.sendandrecv({"CCP": "CAM SET 3 1024 1024 256 256"})
        localtime0 = time.strftime("%Y_%m_%d_%H_%M_%S", time.localtime())
        localfolder = com.setOutputFolder('output\BOST_FOR_FCOUSE\static_focus/' + localtime0)
        name = 'static_focus'
        file = os.path.join(localfolder, name + '.txt')
        f = open(file, 'a')
        # with open(os.path.join(localfolder, 'focustest.txt'),'a') as f:

        print('%s \tStart test\tAt:%s' % (name, localtime0))
        f.write('%s \t movez:%d \tStart test\tAt:%s\n\n' % (name, move_z, localtime0))
        f.close()
        FMfile_name = self.FMfile_text.text()
        FMfile = 'save/' + FMfile_name + '.txt'

        FM, FMZ = com.readFocusMap(FMfile)
        tilenumber = len(FM)
        tilemap = com.TileMap('save/TM518.txt')

        for tid in FM:
            # print(tid)
            xy = tilemap.t2xy([tid])[0]
            x = xy[0]
            y = xy[1]

            C.sendandrecv({"CCP": "SERVO01 MOV 0 %.2f 0" % (x)})
            C.sendandrecv({"CCP": "SERVO02 MOV 0 %.2f 0" % (y)})
            C.sendandrecv({"CCP": "WDI AUTOFOCUSCONTROL 1 TIMEOUT 1000"})  # AutoFocus On!
            time.sleep(1)
            C.sendandrecv({"msgID": 1, "CCP": "LED_G SET 1 %.3f" % 0.3})
            C.sendandrecv({"CCP": "LED_G OPEN"})
            repeat_times = int(self.static_fcouse_cyc_value.text())
            zfocus_up_all = []
            zfocus_down_all = []
            fv_up_all = []
            fv_down_all = []

            for i in range(1, repeat_times + 1):
                with open(file, 'a') as f:
                    C.sendandrecv({"CCP": "WDI AUTOFOCUSCONTROL 1 TIMEOUT 1000"})  # AutoFocus On!
                    zData = C.sendandrecv({"CCP": "WDI GET 5 TIMEOUT 1000"})  # To Wait for FocusOver and Get z
                    zData_up = float(zData[b'data'][0])
                    # time.sleep(0.1)
                    C.sendandrecv({"CCP": "CAM SET 2 %.3f" % 0.004})
                    C.sendandrecv({"CCP": "WDI_CAPTURER TRIGGERPHOTO 0 0 0"})
                    data = C.sendandrecv({"CCP": "CAM GETIMAGE"})
                    img = com.data2image(data,[256,256])
                    output_img = os.path.join(localfolder, 'tile_%03d_up_%03d.tiff' % (tid,i))
                    cv2.imwrite(output_img, img)
                    # fv_upleft=WAVV(img[20:220,20:220])
                    # fv_upright=WAVV(img[20:220,1828:2028])
                    fv_midd_up = com.WAVV(img)
                    zfocus_up_all = np.append(zfocus_up_all, zData_up)
                    fv_up_all = np.append(fv_up_all, fv_midd_up)
                    C.sendandrecv({"CCP": "WDI AUTOFOCUSCONTROL 0 TIMEOUT 1000"})  # AutoFocus Off!
                    C.sendandrecv({"CCP": "WDI SET 4 %f TIMEOUT 1000" % (zData_up + move_z)})
                    time.sleep(0.1)
                    f.write('tid：%d from up: cyc:%d \tzfocus:%.3f \tfv_value:%.3f \n' % (tid,i, zData_up, fv_midd_up))
            uniformity=max(zfocus_up_all)-min(zfocus_up_all)
            with open(file, 'a') as f:
                f.write('tid：%d from up\tuniformity:%.3f \n' % (tid, uniformity))
            for i in range(1, repeat_times + 1):
                with open(file, 'a') as f:
                    C.sendandrecv({"CCP": "WDI AUTOFOCUSCONTROL 1 TIMEOUT 1000"})  # AutoFocus On!
                    zData = C.sendandrecv({"CCP": "WDI GET 5 TIMEOUT 1000"})  # To Wait for FocusOver and Get z
                    zData_down = float(zData[b'data'][0])
                    # time.sleep(0.1)
                    C.sendandrecv({"CCP": "WDI_CAPTURER TRIGGERPHOTO 0 0 0"})
                    data = C.sendandrecv({"CCP": "CAM GETIMAGE"})
                    img = com.data2image(data,[256,256])
                    output_img = os.path.join(localfolder, 'tile_%03d_down_%03d.tiff' % (tid,i))
                    cv2.imwrite(output_img, img)
                    # fv_upleft=WAVV(img[20:220,20:220])
                    # fv_upright=WAVV(img[20:220,1828:2028])
                    fv_midd_down = com.WAVV(img)
                    zfocus_down_all = np.append(zfocus_down_all, zData_down)
                    fv_down_all = np.append(fv_down_all, fv_midd_down)
                    C.sendandrecv({"CCP": "WDI AUTOFOCUSCONTROL 0 TIMEOUT 1000"})  # AutoFocus Off!
                    C.sendandrecv({"CCP": "WDI SET 4 %f TIMEOUT 1000" % (zData_down - move_z)})
                    time.sleep(0.1)
                    f.write('tid：%d from down: cyc:%d \tzfocus:%.3f \tfv_value:%.3f \n' % (tid,i, zData_down, fv_midd_down))
            uniformity = max(fv_down_all) - min(fv_down_all)
            with open(file, 'a') as f:
                f.write('tid：%d from up:  \tuniformity:%.3f \n' % (tid, uniformity))
            C.sendandrecv({"CCP": "LED_G CLOSE"})
            f = open(file, 'a')
            localtime = time.strftime("%Y-%m-%d_%H:%M:%S", time.localtime())
            f.write('%s \tFinish!\tAt:%s\n' % (name, localtime))
            f.close()

    def region_vibration_test(self):
        # 测“移动稳定性”
        # 设置工作电流

        wait_time = float(self.wait_time_for_vibration_text.text())

        blueLEDcurrent = 10
        print("blueLED current:", blueLEDcurrent, "A")
        C.sendandrecv({"msgID": 1, "CCP": "LED_B SET 1 %.1f" % blueLEDcurrent})
        localtime0 = time.strftime("%Y_%m_%d_%H_%M_%S", time.localtime())
        outputfolder = com.setOutputFolder('output/region_vibration_test/' + localtime0)
        localfolder = com.setOutputFolder(os.path.join(outputfolder + '\\wait_time_%03dms_02' % (wait_time * 1000)))
        name = 'Vibration_wait_time_%03dms_01' % (wait_time * 1000)
        file = os.path.join(localfolder, name + '.txt')

        expTime = 0.05
        n = int(self.Vibration_scan_rep_value.text())
        FMfile_name = self.FMfile_Vibration_text.text()
        FMZfile = 'save/' + FMfile_name + '.txt'
        tilemap = com.TileMap('save/TM518.txt')
        FM, FMZ = com.readFocusMap(FMZfile)
        m = len(FM)

        f = open(file, 'a')
        # with open(os.path.join(localfolder, 'focustest.txt'),'a') as f:
        localtime0 = time.strftime("%Y-%m-%d_%H:%M:%S", time.localtime())
        print('%s \tStart test\tAt:%s' % (name, localtime0))
        f.write('%s \tStart test\tAt:%s\n' % (name, localtime0))
        f.close()
        C.sendandrecv({"CCP": "WDI AUTOFOCUSCONTROL 1 TIMEOUT 1000"})
        vib_tile = []
        vib_all = []
        C.sendandrecv({"CCP": "CAM SET 3 0 0 2048 2048"})
        C.sendandrecv({"CCP": "CAM SET 2 %.3f" % expTime})
        for tid in FM:
            with open(file, 'a') as f:
                xy = tilemap.t2xy([tid])[0]
                x = xy[0]
                y = xy[1]
                C.sendandrecv({"CCP": "SERVO01 MOV 0 %.2f 0" % (x)})
                C.sendandrecv({"CCP": "SERVO02 MOV 0 %.2f 0" % (y)})
                imagefolder = com.setOutputFolder(os.path.join(localfolder + '\\tile%04d' % tid))

                # FOCUSFOUND,zs,fv,zfocus,coeff,var_matrix,img = com.focus_method10(zfocus,com.focusThr,largerange=[125,45],savefigure=False,figurepath=localfolder)
                # com.z_movewait(zfocus+0.5)
                time.sleep(1)
                zData = C.sendandrecv({"CCP": "WDI GET 5 TIMEOUT 1000"})
                print('z=%fum' % zData[b'data'][0])
                zfocus = zData[b'data'][0]
                # C.sendandrecv({"CCP": "WDI AUTOFOCUSCONTROL 0 TIMEOUT 1000"})
                print('AutoFocus Off!')

                C.sendandrecv({"CCP": "LED_B OPEN"})
                C.sendandrecv({"CCP": "WDI_CAPTURER TRIGGERPHOTO 0 0 0"})  # WDI
                data = C.sendandrecv({"CCP": "CAM GETIMAGE"})

                # data4 = C.sendandrecv({"CCP": "PI GET 3"})
                C.sendandrecv({"CCP": "WDI GET 4 TIMEOUT 1000"})  # WDI
                img = com.data2image(data)
                C.sendandrecv({"CCP": "LED_B CLOSE"})
                cv2.imwrite(os.path.join(imagefolder, 'tile%04d_00.tiff' % tid), img)
                greyvalue = np.mean(img)

                vib = []
                for i in range(1, n + 1):
                    C.sendandrecv({"CCP": "SERVO01 MOV 0 %.2f 0" % (x - 1.33)})
                    C.sendandrecv({"CCP": "SERVO02 MOV 0 %.2f 0" % (y - 1.33)})
                    time.sleep(1)
                    C.sendandrecv({"CCP": "SERVO01 MOV 0 %.2f 0" % (x)})
                    C.sendandrecv({"CCP": "SERVO02 MOV 0 %.2f 0" % (y)})
                    time.sleep(wait_time)

                    C.sendandrecv({"CCP": "LED_B OPEN"})
                    C.sendandrecv({"CCP": "WDI_CAPTURER TRIGGERPHOTO 0 0 0"})
                    data = C.sendandrecv({"CCP": "CAM GETIMAGE"})
                    img = com.data2image(data)
                    C.sendandrecv({"CCP": "LED_B CLOSE"})
                    cv2.imwrite(os.path.join(imagefolder, 'tile%04d_%02d.tiff' % (tid, i)), img)
                    vibration = com.cal_vibration(img)
                    vib.append(vibration.round(3))

                print('Tile:%04d \tzfocus:%.3f \tgreyvalue:%d \tvib_mean:%.3f \tvib:%s' % (
                    tid, zfocus, greyvalue, np.mean(vib), vib))
                f.write('Tile:%04d \tzfocus:%.3f \tgreyvalue:%d \tvib_mean:%.3f \tvib:%s\n' % (
                    tid, zfocus, greyvalue, np.mean(vib), vib))

                vib_all = np.append(vib_all, vib)
                vib_tile = np.append(vib_tile, np.mean(vib))

                del data
                del img
                gc.collect()

        C.sendandrecv({"CCP": "WDI_CAPTURER TRIGGERPHOTO 0 0 0"})
        print('Vibration_tile_max:\t%s' % (max(vib_tile)))
        print('Vibration_mean:\t%s' % (np.mean(vib_all)))

        f = open(file, 'a')
        f.write('vibration_all:\t%s\n' % (vib_all))
        f.write('vibration_tile:\t%s\n' % (vib_tile))
        f.write('Vibration_tile_max:\t%.6f\n' % (max(vib_tile)))
        f.write('Vibration_mean:\t%.6f\n' % (np.mean(vib_all)))
        localtime = time.strftime("%Y-%m-%d_%H:%M:%S", time.localtime())
        print('%s \tFinish!\tAt:%s' % (name, localtime))
        f.write('%s \tFinish!\tAt:%s\n' % (name, localtime))
        f.close()

        # 统计所有测试数据
        vib_ratio = np.size(np.where(vib_all > 0.3)) / np.size(vib_all)
        plt.figure(figsize=(20, 10))
        plt.plot(vib_all, '.:')
        p1, = plt.plot([0, len(vib_all)], [0.2, 0.2], 'r:')
        p2, = plt.plot([0, len(vib_all)], [np.mean(vib_all), np.mean(vib_all)], 'g-.')
        plt.xlabel('test_num')
        plt.ylabel('Vibration')
        plt.legend([p1, p2], ['Required standards:0.2', ' measured value_mean'], loc=0)
        plt.title('Vibration_all @ wait_time: %03dms\nvibration_mean: %.2f' % (wait_time * 1000, np.mean(vib_all)))
        plt.savefig(os.path.join(localfolder, 'Vibration_all-waittime_%03dms.png' % (wait_time * 1000)))
        plt.show()

        # 画Vibration_mean曲线
        m = len(FM)
        # n=5
        plt.figure(figsize=(20, 10))
        plt.plot(np.reshape(vib_all, [m, n]), '.')
        plt.plot(vib_tile, '*-')
        p1, = plt.plot([0, m], [0.2, 0.2], 'r:')
        p2, = plt.plot([0, m], [np.mean(vib_all), np.mean(vib_all)], 'g-.')
        plt.plot([8.5, 8.5], [0, 0.6], 'b:')
        plt.plot([17.5, 17.5], [0, 0.6], 'b:')
        plt.plot([26.5, 26.5], [0, 0.6], 'b:')
        plt.xlabel('tile_num')
        plt.ylabel('Vibration')
        plt.legend([p1, p2], ['Required standards:0.2', ' measured value_mean'], loc=0)
        plt.title('Vibration_mean @ wait_time: %03dms\nvibration_mean: %.2f  Vib>0.3: %.2f%%' % (
            wait_time * 1000, np.mean(vib_all), vib_ratio))
        plt.savefig(os.path.join(localfolder, 'Vibration_mean-waittime_%03dms.png' % (wait_time * 1000)))
        plt.show()

        # 适用于4x9-2
        # 画Vibration_map
        plt.figure(figsize=(5, 10))
        plt.imshow(np.reshape(vib_tile, [4, 9]).T, cmap='jet', vmin=0.0, vmax=1)
        plt.colorbar()
        plt.xlabel('Tile_X');
        plt.ylabel('Tile_Y')
        vib_ratio = np.size(np.where(vib_all > 0.3)) / np.size(vib_all)
        plt.title('Vibration_mean @ wait_time: %03dms\nmean: %.2f max: %.2f Vib>0.3: %.2f%%'
                  % (wait_time * 1000, np.mean(vib_all), max(vib_tile), vib_ratio))
        plt.savefig(os.path.join(localfolder, 'Vibration_map-waittime_%03dms-2.png' % (wait_time * 1000)))
        plt.show()

    def move_for_focus(self):
        # 扫描对焦
        global tilenumber, move_localfolder

        cyc = int(self.cyc_value.text())
        FMfile_name = self.FMfile_text.text()
        FMfile = 'save/' + FMfile_name + '.txt'

        FM, FMZ = com.readFocusMap(FMfile)
        tilenumber = len(FM)
        tilemap = com.TileMap('save/TM518.txt')
        expTime = 0.03
        outputfolder = com.setOutputFolder('output/vibration')
        blueLEDcurrent=10
        C.sendandrecv({"CCP": "CAM SET 2 %.3f" % expTime})
       # C.sendandrecv({"msgID": 1, "CCP": "LED_G SET 1 0.3"})
        #C.sendandrecv({"msgID": 1, "CCP": "LED_G SET 1 0.3"})
        C.sendandrecv({"CCP": "WDI AUTOFOCUSCONTROL 1 TIMEOUT 1000"})  # AutoFocus On!
        C.sendandrecv({"CCP": "SERVO01 MOV 4 %.2f 0"})
        C.sendandrecv({"CCP": "SERVO02 MOV 4 %.2f 0"})
        wait_time = float(self.wait_time_for_fcouse_text.text())
        time.sleep(wait_time)
        fv_tile = []
        zfocus_wdi_tile = []
        localtime0 = time.strftime("%Y_%m_%d_%H_%M_%S", time.localtime())
        move_localfolder = com.setOutputFolder('output\BOST_FOR_FCOUSE\move_focus/' + localtime0)

        # img_Folder = com.setOutputFolder('output\BOST_FOR_FCOUSE\output_img_518S')
        file = os.path.join(move_localfolder, 'focus_accuracy.txt')
        f = open(file, 'w')
        C.sendandrecv({"msgID": 1, "CCP": "LED_B SET 1 %.1f" % blueLEDcurrent})
        #C.sendandrecv({"CCP": "LED_G OPEN"})
        C.sendandrecv({"CCP": "LED_B OPEN"})
        for i in range(1, cyc + 1):
            for tid in FM:
                # print(tid)
                xy = tilemap.t2xy([tid])[0]
                x = xy[0]
                y = xy[1]
                C.sendandrecv({"CCP": "SERVO01 MOV 0 %.2f 0" % (x)})
                C.sendandrecv({"CCP": "SERVO02 MOV 0 %.2f 0" % (y)})
                C.sendandrecv({"CCP": "WDI AUTOFOCUSCONTROL 1 TIMEOUT 1000"})  # AutoFocus On!
                time.sleep(wait_time)
                t0 = time.time()
                zData = C.sendandrecv({"CCP": "WDI GET 5 TIMEOUT 1000"})  # To Wait for FocusOver and Get z
                t1 = time.time()
                focus_time = (t1 - t0) * 1000
                zfocus_wdi = zData[b'data'][0]
                #zfocus_wdi=1
                C.sendandrecv({"CCP": "CAM SET 3 0 0 2048 2048"})
                C.sendandrecv({"CCP": "LED_B OPEN"})
                C.sendandrecv({"CCP": "WDI_CAPTURER TRIGGERPHOTO 0 0 0"})
                data = C.sendandrecv({"CCP": "CAM GETIMAGE"})
                C.sendandrecv({"CCP": "LED_B CLOSE"})
                wdi_img = com.data2image(data,[2048,2048])
                output_img = os.path.join(move_localfolder, 'wdi_tile%04d_%02d.tiff' % (tid, i))
                cv2.imwrite(output_img, wdi_img)
                #C.sendandrecv({"CCP": "WDI AUTOFOCUSCONTROL 0 TIMEOUT 1000"})  # AutoFocus Off!
                #z, fv, imgs, zFocus = com.zscan(zfocus_wdi-4, zfocus_wdi+4, 0.3, show=False)  # 780,796 need to be changed!!!
                #C.sendandrecv({"CCP": "WDI SET 4 %f TIMEOUT 1000" % zFocus})
                greyvalue = np.mean(wdi_img)
                fv_midd = com.WAVV(wdi_img)

                #output_img = os.path.join(move_localfolder, 'scan_tile%04d_%02d.tiff' % (tid, i))
                #cv2.imwrite(output_img, img)
                fv_zscan=com.WAVV(wdi_img)
                zFocus=1
               # fv_tile = np.append(fv_tile, fv_midd)
                # zfocus_wdi_tile = np.append(zfocus_wdi_tile, zfocus_wdi)
                f.write('cyc:%02d \ttile:%04d \tzfocus=%.3f \tgreyvalue=%d \tfv_midd=%f \ttime=%.3f\tzFocus=%.3f\tzscan_fv=%.3f\n' % (
                    i, tid, zfocus_wdi, greyvalue, fv_midd, focus_time,zFocus,fv_zscan))

        f.close()
        C.sendandrecv({"CCP": "WDI AUTOFOCUSCONTROL 0 TIMEOUT 1000"})  # AutoFocus Off!
        #C.sendandrecv({"CCP": "LED_G CLOSE"})


    def Global_Scan(self):
        # FullScan by DS
        cyc = int(self.global_scan_rep_value.text())
        for roundNum in range(1, 2):  #
            for cycleNum in range(1, cyc + 1):  #

                t0 = time.time()
                C.sendandrecv({"CCP": "WDI_CAPTURER SCAN %d %d TIMEOUT 1800000" % (roundNum, cycleNum)})
                t1 = time.time()
                print("round%d cycle%d used %.3fs" % (roundNum, cycleNum, t1 - t0))
                # print(Data)
                # print(Data[b'data'][0])

        print('This cell is done!')

    def LED_test(self):

        # chip moves to central position
        x = Xoffset + 17.98 / 2
        y = Yoffset + 48.6 / 2
        C.sendandrecv({"CCP": "SERVO01 MOV 0 %.2f 0" % (x)})
        C.sendandrecv({"CCP": "SERVO02 MOV 0 %.2f 0" % (y)})
        outputfolder=com.setOutputFolder('output/LED_test')

        f = open(os.path.join(outputfolder, 'BOST03.txt'), 'a')
        # LED risingtime
        C.sendandrecv({"msgID": 1, "CCP": "LED_B SET 1 10"})
        C.sendandrecv({"msgID": 1, "CCP": "LED_G SET 1 0.3"})

        for LED in ['B', 'G']:
            t = []
            v = []
            tt = 0
            C.sendandrecv({"CCP": "LED_%s OPEN" % LED})
            t0 = time.time()
            while tt < 1000:
                PDdata = C.sendandrecv({"CCP": "LED_%s GET 2" % LED})
                vv = float(PDdata[b'data'][0])
                tt = (PDdata['time'] - t0) * 1000
                v.append(vv)
                t.append(tt)
            plt.plot(t, v, '.-')
            plt.title('{} risingtime'.format(LED))
            plt.xlabel('time(ms)')
            plt.ylabel('PDvalue')
            plt.savefig(os.path.join(outputfolder, '{}-LED-risingtime.png'.format(LED)))
            plt.show()
            data = C.sendandrecv({"CCP": "LED_%s CLOSE" % LED})
            vs = v
            for i in range(2, len(v) - 2):
                vs[i] = np.sum(v[i - 2:i + 3]) / 5
            #    plt.plot(t,vs,'.-')
            #     plt.show()
            ledthr = np.mean(np.array(vs)[np.where(np.array(t) > 200)[0]]) * 0.95
            risetime = np.array(t)[np.where(np.array(vs) > ledthr)[0][0]]
            f.write('%s-risingtime: %.2f\n' % (LED, risetime))
        f.close()

        f = open(os.path.join(outputfolder, 'LED10minstablity.txt'), 'a')
        C.sendandrecv({"msgID": 1, "CCP": "LED_B SET 1 10"})
        C.sendandrecv({"msgID": 1, "CCP": "LED_G SET 1 0.3"})

        bv = []
        gv = []
        t0 = time.time()
        tt = 0
        while tt < 0.17:
            b = open(os.path.join(outputfolder, 'BLED10min.txt'), 'a')
            g = open(os.path.join(outputfolder, 'GLED10min.txt'), 'a')
            data = C.sendandrecv({"CCP": "LED_B OPEN"})
            time.sleep(0.1)
            PDdata = C.sendandrecv({"CCP": "LED_B GET 2"})
            v = float(PDdata[b'data'][0])
            #     b.write('%.2f\n' % v)
            bv.append(v)
            data = C.sendandrecv({"CCP": "LED_B CLOSE"})

            data = C.sendandrecv({"CCP": "LED_G OPEN"})
            time.sleep(0.1)
            PDdata = C.sendandrecv({"CCP": "LED_G GET 2"})
            v = float(PDdata[b'data'][0])
            #     g.write('%.2f\n' % v)
            gv.append(v)
            data = C.sendandrecv({"CCP": "LED_G CLOSE"})

            b.close()
            g.close()
            time.sleep(0.1)
            tt = (time.time() - t0) / 3600

        plt.figure(1)
        plt.subplot(211)
        plt.plot(bv, '.-')
        plt.title('B-LED-10min-stablity|pv:%.2f|mean:%.2f' % (np.amax(bv) - np.amin(bv), np.mean(bv)))
        plt.ylabel('PDvalue')
        plt.subplot(212)
        plt.plot(bv[1:100], '.-')
        plt.ylabel('PDvalue')
        plt.savefig(os.path.join(outputfolder, 'B-LED-10min-stablity.png'))
        plt.show()

        plt.figure(2)
        plt.subplot(211)
        plt.plot(gv, '.-')
        plt.title('G-LED-10min-stablity|pv:%.2f|mean:%.2f' % (np.amax(gv) - np.amin(gv), np.mean(gv)))
        plt.ylabel('PDvalue')
        plt.subplot(212)
        plt.plot(gv[1:100], '.-')
        plt.ylabel('PDvalue')
        plt.savefig(os.path.join(outputfolder, 'G-LED-10min-stablity.png'))
        plt.show()

        f.write('B10minstablity: %.2f%%\nG10minstablity: %.2f%%\n' % (
        (np.amax(bv) - np.amin(bv)) / np.mean(bv) * 100, (np.amax(gv) - np.amin(gv)) / np.mean(gv) * 100))
        f.close()

        data = C.sendandrecv({"CCP": "LED_G CLOSE" })
    def BOST21(self):
        # chip moves to central position


        # 控温25度
        outputfolder = com.setOutputFolder('output\BOST21')
        #logger = com.createLogger(outputfolder)
        C.sendandrecv({"CCP": "TC_C1 OPEN 25"})
        time.sleep(60)
        tilemap = 'save/TM518.txt'
        # estimate sigma
        S, amp = com.estimatePara(FMfile='save/FM4x9.txt', tilemap='save/TM518.txt')

        # Scanning first FMZ
        FM0file = 'save/FM518.txt'
        FMZ0file = os.path.join(outputfolder, 'FMZ518-cyc0.txt')
        FMZ0fullfile = os.path.join(outputfolder, 'FMZfull-cyc0.txt')
        timeOfSuperscan = os.path.join(outputfolder, 'timeOfSuperscan.txt')

        if not os.path.exists(FMZ0file):
            print('Scanning first FMZ...')
            t0 = time.time()
            lastFMZ = []
            FMZ = com.scanFMZ1(FM0file, lastFMZ, S, amp, tilemap, figurepath=os.path.join(outputfolder, 'FMZ0'),
                               savefigure=False)
            t1 = time.time()
            com.writeFocusMap(FMZ0file, FMZ)
           # logger.info('FMZ0 scan take %f s.' % (t1 - t0))
            f = open(timeOfSuperscan, 'a')
            f.write('FMZ0 scan take %.3f s.\n' % (t1 - t0))
            f.close()
        else:
            print('Scanning first FMZ...')
            #logger.info('Skip FMZ0 scanning')

        FMZ = com.readCSV(FMZ0file)
        gzfull, FMZfull = com.getFullFMZ(FMZ, tilemap)
        com.writeFocusMap(FMZ0fullfile, FMZfull)

        # 走变温流程
        roundnumber = 0

        for cyclenumber in range(1, 30):
            print('cyclenumber:%d' % cyclenumber)

            C.sendandrecv({"CCP": "TC_C1 OPEN 4"})
            time.sleep(120)
            C.sendandrecv({"CCP": "TC_C1 OPEN 65"})
            time.sleep(30)
            C.sendandrecv({"CCP": "TC_C1 OPEN 20"})
            time.sleep(20)
            C.sendandrecv({"CCP": "TC_C1 OPEN 25"})
            time.sleep(60)

            lastFMZ = FMZfull
            t0 = time.time()
            cycle = cyclenumber
            FMZ1fullfile, FMZ1full = com.getNewFMZ1(cycle, roundnumber, lastFMZ, S, amp, FMZ0fullfile=FMZ0fullfile)
            t1 = time.time()

            FMZfull = FMZ1full

            smallroi = [768, 768, 512, 512]
            com.FMZscan(FMZ1fullfile, exptime=0.1, led='b', name='ff', movedelay=0.1, cyclenumber=cyclenumber,
                        cycfolder=os.path.join(outputfolder, 'round%d' % roundnumber, 'seq', 'C%03d' % cyclenumber),
                        roi=smallroi)
            #     com.FMZscan(FMZ1fullfile,exptime=0.002,led='g',name='bf',movedelay=0.1,cyclenumber=cyclenumber,cycfolder=os.path.join(outputfolder,'round%d' % roundnumber,'seq','C%03d'%cyclenumber),roi=smallroi )

           # logger.info('FMZ1 scan take %f s.' % (t1 - t0))
            f = open(timeOfSuperscan, 'a')
            f.write('FMZ1 scan take %.3f s.\n' % (t1 - t0))
            f.close()

    def camer_test(self):

        # chip moves to central position
        x = Xoffset + 17.98 / 2
        y = Yoffset + 48.6 / 2
        C.sendandrecv({"CCP": "SERVO01 MOV 0 %.2f 0" % (x)})
        C.sendandrecv({"CCP": "SERVO02 MOV 0 %.2f 0" % (y)})
        outputfolder = com.setOutputFolder('output\camer_test')
        f = open(os.path.join(outputfolder, 'BOST04.txt'), 'a')
        # brightField, exp = 2ms, greenLED current = 0.3A
        expTime = 0.002
        LEDcurrent = []
        M = []
        PD = []

        for greenLEDcurrent in np.linspace(0, 0.45, 10):
            C.sendandrecv({"msgID": 1, "CCP": "LED_G SET 1 %.3f" % greenLEDcurrent})
            C.sendandrecv({"CCP": "CAM SET 2 %.3f" % expTime})
            C.sendandrecv({"CCP": "LED_G OPEN"})
            PDdata = C.sendandrecv({"CCP": "LED_G GET 2"})
            PDdata = float(PDdata[b'data'][0])
            C.sendandrecv({"CCP": "WDI_CAPTURER TRIGGERPHOTO 0 0 0"})
            data = C.sendandrecv({"CCP": "CAM GETIMAGE"})
            img = com.data2image(data)
            PDdata = C.sendandrecv({"CCP": "LED_G GET 2"})
            vv = float(PDdata[b'data'][0])
            data = C.sendandrecv({"CCP": "LED_G CLOSE"})
            temp = np.mean(img[900:1100, 900:1100])
            LEDcurrent.append(greenLEDcurrent)
            M.append(temp)
            PD.append(vv)

        fig = plt.figure(1)

        ax1 = fig.add_subplot(111)
        ax1.plot(LEDcurrent, M, '.-')
        ax1.set_ylabel('mean grayvalue')
        ax1.set_xlabel('green LED current(A)')
        ax1.set_title("bright field response")

        ax2 = ax1.twinx()  # this is the important function
        ax2.plot(LEDcurrent, PD, '.-r')
        ax2.set_ylabel('PD value')

        # plt.plot(LEDcurrent,M,'.-')
        # plt.title('bright field response')
        # plt.xlabel('green LED current(A)')
        # plt.ylabel('mean grayvalue')
        plt.savefig(os.path.join(outputfolder, 'bright-field-response.png'))
        plt.show()
        # darkfield, exp = 1s
        expTime = 1
        C.sendandrecv({"CCP": "CAM SET 2 %.3f" % expTime})
        TEMPdata = C.sendandrecv({"CCP": "TEMP_E GET"})
        TEMPdata = float(TEMPdata[b'data'][0])
        C.sendandrecv({"CCP": "WDI_CAPTURER TRIGGERPHOTO 0 0 0"})
        data = C.sendandrecv({"CCP": "CAM GETIMAGE"})
        img = com.data2image(data)
        temp = np.mean(img[900:1100, 900:1100])
        std = np.std(img[900:1100, 900:1100])

        plt.figure(2)
        plt.imshow(img, cmap=plt.cm.gray)
        plt.plot([900, 1100], [900, 900], 'r')
        plt.plot([900, 900], [900, 1100], 'r')
        plt.plot([1100, 1100], [900, 1100], 'r')
        plt.plot([900, 1100], [1100, 1100], 'r')
        plt.title('dark field noise|mean grayvalue:%.2f|std:%.2f' % (temp, std))
        plt.axis('off')
        plt.savefig(os.path.join(outputfolder, 'dark-field-noise.png'), dpi=200)
        plt.show()
        f.write('darkfieldnoise:%.2f-std:%.2f\n' % (temp, std))
        f.close()

    def intensity_stability(self):
        tid=1308
        tilemap = com.TileMap('save/TM518.txt')
        xy = tilemap.t2xy([tid])[0]
        x = xy[0]
        y = xy[1]
        C.sendandrecv({"CCP": "SERVO01 MOV 0 %.2f 0" % (x)})
        C.sendandrecv({"CCP": "SERVO02 MOV 0 %.2f 0" % (y)})
        outputfolder = com.setOutputFolder('output\cintensity_stability')
        #x = Xoffset + 17.98 / 2  # 20200910 moved here by PH
       # y = Yoffset + 48.6 / 2  # 20200910 moved here by PH


        C.sendandrecv({"CCP": "CAM SET 3 0 0 2048 2048"})  # 20200910 added by PH
        # FOCUSFOUND,zs,fv,zfocus,coeff,var_matrix,img = com.focus_method10(125,com.focusThr,savefigure=False,figurepath='.') # 20200910 added by PH
        # print(zfocus) # 20200910 added by PH
        # com.z_movewait(zfocus) # 20200910 added by PH
        time.sleep(0.1)
        C.sendandrecv({"CCP": "WDI AUTOFOCUSCONTROL 1 TIMEOUT 1000"})  # WDI
        print('AutoFocus On!')  # WDI
        zData = C.sendandrecv({"CCP": "WDI GET 5 TIMEOUT 1000"})  # WDI
        print('z=%fum' % zData[b'data'][0])  # WDI

        localfolder = com.setOutputFolder(os.path.join(outputfolder + '\\imagingStability'))
        blueLEDcurrent = 10
        expTime = 0.03

        C.sendandrecv({"msgID": 1, "CCP": "LED_B SET 1 %.1f" % blueLEDcurrent})
        C.sendandrecv({"CCP": "CAM SET 2 %.3f" % expTime})
        #C.sendandrecv({"CCP": "LED_B OPEN"})


        for i in range(1, 101):
            C.sendandrecv({"CCP": "LED_B OPEN"})
            PDdata = C.sendandrecv({"CCP": "LED_B GET 2"})
            vv = float(PDdata[b'data'][0])
            C.sendandrecv({"CCP": "WDI_CAPTURER TRIGGERPHOTO 0 0 0"})  # WDI
            data = C.sendandrecv({"CCP": "CAM GETIMAGE"})
            img = com.data2image(data)
            cv2.imwrite(os.path.join(localfolder, 'imagingStability_%d_PD%.2f.tiff' % (i, vv)), img)
            del data
            del img
            #C.sendandrecv({"CCP": "LED_B CLOSE"})
            gc.collect()

        C.sendandrecv({"CCP": "LED_B CLOSE"})
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.BOST_FOR_FCOUSE_Button.setText(_translate("MainWindow", "移动对焦"))
        self.analyze_WDI_focus_Button.setText(_translate("MainWindow", "移动对焦结果"))
        self.analyze_offset_Button.setText(_translate("MainWindow", "xy移动重复性"))
        self.cyc_label.setText(_translate("MainWindow", "设置重复次数"))
        self.FM_label.setText(_translate("MainWindow", "FMfile"))
        self.static_fcouse_Button.setText(_translate("MainWindow", "单点对焦"))
        self.static_fcouse_cyc_label.setText(_translate("MainWindow", "设置重复次数"))
        self.analyze_static_fcouse_Button.setText(_translate("MainWindow", "对焦一致性"))
        self.Region_Vibration_Button.setText(_translate("MainWindow", "抖动测试"))
        self.cyc_label_2.setText(_translate("MainWindow", "设置重复次数"))
        self.FM_label_2.setText(_translate("MainWindow", "FMfile"))
        self.Global_Scan_Button.setText(_translate("MainWindow", "全局扫描"))
        self.cyc_label_3.setText(_translate("MainWindow", "设置重复次数"))
        self.wait_time_for_fcouse_text_label.setText(_translate("MainWindow", "等待时间"))
        self.wait_time_for_vibration_label.setText(_translate("MainWindow", "等待时间"))
        self.camer_Button.setText(_translate("MainWindow", "相机测试"))
        self.led_test_Button.setText(_translate("MainWindow", "LED测试"))
        self.BOST21_Button.setText(_translate("MainWindow", "bost21"))
        self.intensity_stability_Button.setText(_translate("MainWindow", "荧光强度一致性"))
